diff --git a/lib/python/gladevcp/persistence.py b/lib/python/gladevcp/persistence.py
index 62e3e2af35..791504485e 100644
--- a/lib/python/gladevcp/persistence.py
+++ b/lib/python/gladevcp/persistence.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env linuxcnc-python
 # vim: sts=4 sw=4 et
 #    This is a component of EMC
 #    util.py Copyright 2010 Michael Haberler
@@ -21,6 +21,8 @@
     persistence support for gladevcp widgets
     Michael Haberler 11/2010
 '''
+from __future__ import absolute_import
+from __future__ import print_function
 import os
 import sys
 import time
@@ -28,8 +30,8 @@ import gtk
 from configobj import ConfigObj, flatten_errors
 from validate import Validator
 from hashlib import sha1
-from hal_widgets import _HalWidgetBase
-from hal_actions import _EMC_ActionBase
+from .hal_widgets import _HalWidgetBase
+from .hal_actions import _EMC_ActionBase
 from gladevcp.gladebuilder import widget_name
 
 class UselessIniError(Exception):
@@ -45,13 +47,13 @@ version_number = 1
 
 
 def warn(*args):
-    print >> sys.stderr,''.join(args)
+    print(''.join(args), file=sys.stderr)
 
 
 def dbg(level,*args):
     global debug
     if debug < level: return
-    print ''.join(args)
+    print(''.join(args))
 
 
 def set_debug(value):
@@ -113,7 +115,7 @@ def widget_defaults(widgets):
         try:
             v = get_value(w)
             wvalues[k] = v
-        except Exception,msg:
+        except Exception as msg:
             warn("widget_defaults:" + msg)
             continue
     return wvalues
@@ -141,7 +143,7 @@ class IniFile(object):
             spec += '[' + section + ']\n'
             for varname in sorted(vdict[section].keys()):
                 typename = type(vdict[section][varname]).__name__
-                if co_map.has_key(typename):
+                if typename in co_map:
                     typename = co_map[typename]
                 spec += '\t' + varname + ' = ' + typename  + '\n'
         return spec
@@ -153,7 +155,7 @@ class IniFile(object):
         '''
         dbg(1, "restore_state() from %s" % (self.filename))
 
-        if not self.defaults.has_key(IniFile.ini):
+        if IniFile.ini not in self.defaults:
             raise BadDescriptorDictError("defaults dict lacks 'ini' section")
 
         if  self.defaults[IniFile.ini][IniFile.signature] != (
@@ -167,11 +169,11 @@ class IniFile(object):
         else:
             dbg(1,"signature verified OK for %s " % (self.filename))
 
-        if self.config.has_key(IniFile.vars):
+        if IniFile.vars in self.config:
             for k,v in self.defaults[IniFile.vars].items():
                 setattr(obj,k,self.config[IniFile.vars][k])
 
-        if self.config.has_key(IniFile.widgets):
+        if IniFile.widgets in self.config:
             for k,v in self.config[IniFile.widgets].items():
                 store_value(self.builder.get_object(k),v)
 
@@ -180,11 +182,11 @@ class IniFile(object):
         save obj attributes as listed in ini file 'IniFile.vars' section and
         widget state to 'widgets' section
         '''
-        if self.defaults.has_key(IniFile.vars):
+        if IniFile.vars in self.defaults:
             for k,v in self.defaults[IniFile.vars].items():
                 self.config[IniFile.vars][k] = getattr(obj,k,None)
 
-        if self.config.has_key(IniFile.widgets):
+        if IniFile.widgets in self.config:
             for k in self.defaults[IniFile.widgets].keys():
                 self.config[IniFile.widgets][k] = get_value(self.builder.get_object(k))
 
@@ -242,7 +244,7 @@ class IniFile(object):
                     else:
                         raise Exception(error)
 
-            except (IOError, TypeError,UselessIniError),msg:
+            except (IOError, TypeError,UselessIniError) as msg:
                 warn("%s - creating default" % (msg))
                 self.create_default_ini()
                 continue
